type Point
+ x: double
+ y: double
+ z: double
+ getDistance(p: Point): double
+ getSquaredDistance(p: Point): double

type ValuedPoint extends Point
// inherited x, y, z
+ value: double

type Shape<TPoint> where TPoint: Point
+ verts: List<TPoint>
+ vertCount: int
+ getNearest(p: Point): TPoint

type Interpolator
+ shape: Shape<ValuedPoint>
+ abstract build(): void
+ abstract getValueAt(p: Point): double

type InterpolatorArray 
+ interpolators: List<Interpolator>
+ getNearest(p: Point): Interpolator
+ getValueAt(p: Point): double

// can be used with any shape
type ProximityInterpolator extends Interpolator
+ override build(): void
+ override getValueAt(p: Point): double

// can be used with any shape
type NaiveInterpolator extends Interpolator
+ override build(): void
+ override getValueAt(p: Point): double

type TetrahedronClassicInterpolator extends Interpolator
+ override build(): void
+ override getValueAt(p: Point): double

type InterpolatorFactory: (Shape<ValuedPoint>)-> Interpolator

type InterpolatorTest
+ points: List<ValuedPoint>
+ shapes: List<Shape<ValuedPoint>>
+ targets: List<Point>
+ result: Dictionary<string, List<ValuedPoint>>
+ run(factory: InterpolatorFactory): string
+ toFile(filename: string): void
+ toPythonFile(filename: string): void
+ static fromFile(filename: string): InterpolatorTest

format Native
# comment
[points]
x:double y:double z:double value:double
...
[shapes]
i:double ...
...
[targets]
x:double y:double z:double
...
[result.<InterpolatorType>]
x:double y:double z:double value:double
...

format Python
# comment
Sizes = [size:int...]
X = [x:double...]
Y = [y:double...]
Z = [z:double...]
Result<InterpolatorType> = [value:double...]
...